package com.focustech.android.components.mt.sdk.android.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ACCOUNT.
 */
public class AccountDao extends AbstractDao<Account, String> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserNickName = new Property(2, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property UserSignature = new Property(3, String.class, "userSignature", false, "USER_SIGNATURE");
        public final static Property UserHeadType = new Property(4, Long.class, "userHeadType", false, "USER_HEAD_TYPE");
        public final static Property UserHeadId = new Property(5, String.class, "userHeadId", false, "USER_HEAD_ID");
        public final static Property Timestamp = new Property(6, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property TmNum = new Property(7, Long.class, "tmNum", false, "TM_NUM");
        public final static Property Role = new Property(8, Long.class, "role", false, "ROLE");
        public final static Property Domain = new Property(9, String.class, "domain", false, "DOMAIN");
        public final static Property Password = new Property(10, String.class, "password", false, "PASSWORD");
        public final static Property LastToken = new Property(11, String.class, "lastToken", false, "LAST_TOKEN");
        public final static Property LastAction = new Property(12, long.class, "lastAction", false, "LAST_ACTION");
    }

    ;


    public AccountDao(DaoConfig config) {
        super(config);
    }

    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "'USER_NAME' TEXT," + // 1: userName
                "'USER_NICK_NAME' TEXT," + // 2: userNickName
                "'USER_SIGNATURE' TEXT," + // 3: userSignature
                "'USER_HEAD_TYPE' INTEGER," + // 4: userHeadType
                "'USER_HEAD_ID' TEXT," + // 5: userHeadId
                "'TIMESTAMP' INTEGER," + // 6: timestamp
                "'TM_NUM' INTEGER," + // 7: tmNum
                "'ROLE' INTEGER," + // 8: role
                "'DOMAIN' TEXT," + // 9: domain
                "'PASSWORD' TEXT NOT NULL ," + // 10: password
                "'LAST_TOKEN' TEXT NOT NULL ," + // 11: lastToken
                "'LAST_ACTION' INTEGER NOT NULL );"); // 12: lastAction
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(3, userNickName);
        }
 
        String userSignature = entity.getUserSignature();
        if (userSignature != null) {
            stmt.bindString(4, userSignature);
        }
 
        Long userHeadType = entity.getUserHeadType();
        if (userHeadType != null) {
            stmt.bindLong(5, userHeadType);
        }
 
        String userHeadId = entity.getUserHeadId();
        if (userHeadId != null) {
            stmt.bindString(6, userHeadId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(7, timestamp);
        }
 
        Long tmNum = entity.getTmNum();
        if (tmNum != null) {
            stmt.bindLong(8, tmNum);
        }
 
        Long role = entity.getRole();
        if (role != null) {
            stmt.bindLong(9, role);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(10, domain);
        }
        stmt.bindString(11, entity.getPassword());
        stmt.bindString(12, entity.getLastToken());
        stmt.bindLong(13, entity.getLastAction());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
                cursor.getString(offset + 0), // userId
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userNickName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userSignature
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userHeadType
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userHeadId
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // timestamp
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // tmNum
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // role
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // domain
                cursor.getString(offset + 10), // password
                cursor.getString(offset + 11), // lastToken
                cursor.getLong(offset + 12) // lastAction
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setUserId(cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserSignature(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserHeadType(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUserHeadId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestamp(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTmNum(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setRole(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDomain(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPassword(cursor.getString(offset + 10));
        entity.setLastToken(cursor.getString(offset + 11));
        entity.setLastAction(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Account entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Account entity) {
        if (entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
