package com.focustech.android.components.mt.sdk.android.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SYSTEM_NOTIFY.
 */
public class SystemNotifyDao extends AbstractDao<SystemNotify, Long> {

    public static final String TABLENAME = "SYSTEM_NOTIFY";

    /**
     * Properties of entity SystemNotify.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Cmd = new Property(2, String.class, "cmd", false, "CMD");
        public final static Property ContactType = new Property(3, Long.class, "contactType", false, "CONTACT_TYPE");
        public final static Property ContactId = new Property(4, String.class, "contactId", false, "CONTACT_ID");
        public final static Property RelatedId = new Property(5, String.class, "relatedId", false, "RELATED_ID");
        public final static Property Processed = new Property(6, Boolean.class, "processed", false, "PROCESSED");
        public final static Property Data = new Property(7, byte[].class, "data", false, "DATA");
        public final static Property AddTime = new Property(8, long.class, "addTime", false, "ADD_TIME");
        public final static Property UpdateTime = new Property(9, Long.class, "updateTime", false, "UPDATE_TIME");
    }

    ;


    public SystemNotifyDao(DaoConfig config) {
        super(config);
    }

    public SystemNotifyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SYSTEM_NOTIFY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT NOT NULL ," + // 1: userId
                "'CMD' TEXT NOT NULL ," + // 2: cmd
                "'CONTACT_TYPE' INTEGER," + // 3: contactType
                "'CONTACT_ID' TEXT," + // 4: contactId
                "'RELATED_ID' TEXT," + // 5: relatedId
                "'PROCESSED' INTEGER," + // 6: processed
                "'DATA' BLOB NOT NULL ," + // 7: data
                "'ADD_TIME' INTEGER NOT NULL ," + // 8: addTime
                "'UPDATE_TIME' INTEGER);"); // 9: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SYSTEM_NOTIFY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SystemNotify entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getCmd());
 
        Long contactType = entity.getContactType();
        if (contactType != null) {
            stmt.bindLong(4, contactType);
        }
 
        String contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindString(5, contactId);
        }
 
        String relatedId = entity.getRelatedId();
        if (relatedId != null) {
            stmt.bindString(6, relatedId);
        }
 
        Boolean processed = entity.getProcessed();
        if (processed != null) {
            stmt.bindLong(7, processed ? 1l: 0l);
        }
        stmt.bindBlob(8, entity.getData());
        stmt.bindLong(9, entity.getAddTime());
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(10, updateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SystemNotify readEntity(Cursor cursor, int offset) {
        SystemNotify entity = new SystemNotify( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // userId
                cursor.getString(offset + 2), // cmd
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // contactType
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactId
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // relatedId
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // processed
                cursor.getBlob(offset + 7), // data
                cursor.getLong(offset + 8), // addTime
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SystemNotify entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setCmd(cursor.getString(offset + 2));
        entity.setContactType(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setContactId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRelatedId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProcessed(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setData(cursor.getBlob(offset + 7));
        entity.setAddTime(cursor.getLong(offset + 8));
        entity.setUpdateTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SystemNotify entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SystemNotify entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
