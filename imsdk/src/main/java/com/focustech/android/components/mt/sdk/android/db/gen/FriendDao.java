package com.focustech.android.components.mt.sdk.android.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table FRIEND.
 */
public class FriendDao extends AbstractDao<Friend, Long> {

    public static final String TABLENAME = "FRIEND";

    /**
     * Properties of entity Friend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserNickName = new Property(3, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property UserSignature = new Property(4, String.class, "userSignature", false, "USER_SIGNATURE");
        public final static Property UserHeadType = new Property(5, Long.class, "userHeadType", false, "USER_HEAD_TYPE");
        public final static Property UserHeadId = new Property(6, String.class, "userHeadId", false, "USER_HEAD_ID");
        public final static Property Timestamp = new Property(7, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property TmNum = new Property(8, Long.class, "tmNum", false, "TM_NUM");
        public final static Property Role = new Property(9, Long.class, "role", false, "ROLE");
        public final static Property Domain = new Property(10, String.class, "domain", false, "DOMAIN");
        public final static Property FriendUserId = new Property(11, String.class, "friendUserId", false, "FRIEND_USER_ID");
        public final static Property FriendGroupId = new Property(12, String.class, "friendGroupId", false, "FRIEND_GROUP_ID");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property LastChatTimestamp = new Property(14, Long.class, "lastChatTimestamp", false, "LAST_CHAT_TIMESTAMP");
        public final static Property OnlineRemind = new Property(15, Boolean.class, "onlineRemind", false, "ONLINE_REMIND");
        public final static Property NoDisturb = new Property(16, Boolean.class, "noDisturb", false, "NO_DISTURB");
    }

    ;


    public FriendDao(DaoConfig config) {
        super(config);
    }

    public FriendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FRIEND' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT NOT NULL ," + // 1: userId
                "'USER_NAME' TEXT," + // 2: userName
                "'USER_NICK_NAME' TEXT," + // 3: userNickName
                "'USER_SIGNATURE' TEXT," + // 4: userSignature
                "'USER_HEAD_TYPE' INTEGER," + // 5: userHeadType
                "'USER_HEAD_ID' TEXT," + // 6: userHeadId
                "'TIMESTAMP' INTEGER," + // 7: timestamp
                "'TM_NUM' INTEGER," + // 8: tmNum
                "'ROLE' INTEGER," + // 9: role
                "'DOMAIN' TEXT," + // 10: domain
                "'FRIEND_USER_ID' TEXT NOT NULL ," + // 11: friendUserId
                "'FRIEND_GROUP_ID' TEXT," + // 12: friendGroupId
                "'REMARK' TEXT," + // 13: remark
                "'LAST_CHAT_TIMESTAMP' INTEGER," + // 14: lastChatTimestamp
                "'ONLINE_REMIND' INTEGER," + // 15: onlineRemind
                "'NO_DISTURB' INTEGER);"); // 16: noDisturb
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FRIEND'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Friend entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(4, userNickName);
        }
 
        String userSignature = entity.getUserSignature();
        if (userSignature != null) {
            stmt.bindString(5, userSignature);
        }
 
        Long userHeadType = entity.getUserHeadType();
        if (userHeadType != null) {
            stmt.bindLong(6, userHeadType);
        }
 
        String userHeadId = entity.getUserHeadId();
        if (userHeadId != null) {
            stmt.bindString(7, userHeadId);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(8, timestamp);
        }
 
        Long tmNum = entity.getTmNum();
        if (tmNum != null) {
            stmt.bindLong(9, tmNum);
        }
 
        Long role = entity.getRole();
        if (role != null) {
            stmt.bindLong(10, role);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(11, domain);
        }
        stmt.bindString(12, entity.getFriendUserId());
 
        String friendGroupId = entity.getFriendGroupId();
        if (friendGroupId != null) {
            stmt.bindString(13, friendGroupId);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        Long lastChatTimestamp = entity.getLastChatTimestamp();
        if (lastChatTimestamp != null) {
            stmt.bindLong(15, lastChatTimestamp);
        }
 
        Boolean onlineRemind = entity.getOnlineRemind();
        if (onlineRemind != null) {
            stmt.bindLong(16, onlineRemind ? 1l: 0l);
        }
 
        Boolean noDisturb = entity.getNoDisturb();
        if (noDisturb != null) {
            stmt.bindLong(17, noDisturb ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Friend readEntity(Cursor cursor, int offset) {
        Friend entity = new Friend( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // userId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userNickName
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userSignature
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // userHeadType
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userHeadId
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // timestamp
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // tmNum
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // role
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // domain
                cursor.getString(offset + 11), // friendUserId
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // friendGroupId
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
                cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // lastChatTimestamp
                cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // onlineRemind
                cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0 // noDisturb
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Friend entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserHeadType(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUserHeadId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimestamp(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setTmNum(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setRole(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setDomain(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFriendUserId(cursor.getString(offset + 11));
        entity.setFriendGroupId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLastChatTimestamp(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setOnlineRemind(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setNoDisturb(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Friend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Friend entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
