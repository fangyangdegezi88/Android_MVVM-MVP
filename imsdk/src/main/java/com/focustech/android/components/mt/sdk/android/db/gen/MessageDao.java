package com.focustech.android.components.mt.sdk.android.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MESSAGE.
 */
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property LocalMsgId = new Property(2, String.class, "localMsgId", false, "LOCAL_MSG_ID");
        public final static Property SvrMsgId = new Property(3, String.class, "svrMsgId", false, "SVR_MSG_ID");
        public final static Property FromUserId = new Property(4, String.class, "fromUserId", false, "FROM_USER_ID");
        public final static Property FromUserName = new Property(5, String.class, "fromUserName", false, "FROM_USER_NAME");
        public final static Property ContactId = new Property(6, String.class, "contactId", false, "CONTACT_ID");
        public final static Property ContactType = new Property(7, long.class, "contactType", false, "CONTACT_TYPE");
        public final static Property Msg = new Property(8, String.class, "msg", false, "MSG");
        public final static Property MsgType = new Property(9, long.class, "msgType", false, "MSG_TYPE");
        public final static Property MsgMeta = new Property(10, String.class, "msgMeta", false, "MSG_META");
        public final static Property FileIds = new Property(11, String.class, "fileIds", false, "FILE_IDS");
        public final static Property SendStatus = new Property(12, long.class, "sendStatus", false, "SEND_STATUS");
        public final static Property Status = new Property(13, Long.class, "status", false, "STATUS");
        public final static Property Timestamp = new Property(14, long.class, "timestamp", false, "TIMESTAMP");
    }

    ;


    public MessageDao(DaoConfig config) {
        super(config);
    }

    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT," + // 1: userId
                "'LOCAL_MSG_ID' TEXT UNIQUE ," + // 2: localMsgId
                "'SVR_MSG_ID' TEXT UNIQUE ," + // 3: svrMsgId
                "'FROM_USER_ID' TEXT NOT NULL ," + // 4: fromUserId
                "'FROM_USER_NAME' TEXT NOT NULL ," + // 5: fromUserName
                "'CONTACT_ID' TEXT NOT NULL ," + // 6: contactId
                "'CONTACT_TYPE' INTEGER NOT NULL ," + // 7: contactType
                "'MSG' TEXT NOT NULL ," + // 8: msg
                "'MSG_TYPE' INTEGER NOT NULL ," + // 9: msgType
                "'MSG_META' TEXT," + // 10: msgMeta
                "'FILE_IDS' TEXT," + // 11: fileIds
                "'SEND_STATUS' INTEGER NOT NULL ," + // 12: sendStatus
                "'STATUS' INTEGER," + // 13: status
                "'TIMESTAMP' INTEGER NOT NULL );"); // 14: timestamp
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_USER_ID ON MESSAGE" +
                " (USER_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_SVR_MSG_ID ON MESSAGE" +
                " (SVR_MSG_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_FROM_USER_ID ON MESSAGE" +
                " (FROM_USER_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_CONTACT_ID ON MESSAGE" +
                " (CONTACT_ID);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_CONTACT_TYPE ON MESSAGE" +
                " (CONTACT_TYPE);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_TIMESTAMP ON MESSAGE" +
                " (TIMESTAMP);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String localMsgId = entity.getLocalMsgId();
        if (localMsgId != null) {
            stmt.bindString(3, localMsgId);
        }
 
        String svrMsgId = entity.getSvrMsgId();
        if (svrMsgId != null) {
            stmt.bindString(4, svrMsgId);
        }
        stmt.bindString(5, entity.getFromUserId());
        stmt.bindString(6, entity.getFromUserName());
        stmt.bindString(7, entity.getContactId());
        stmt.bindLong(8, entity.getContactType());
        stmt.bindString(9, entity.getMsg());
        stmt.bindLong(10, entity.getMsgType());
 
        String msgMeta = entity.getMsgMeta();
        if (msgMeta != null) {
            stmt.bindString(11, msgMeta);
        }
 
        String fileIds = entity.getFileIds();
        if (fileIds != null) {
            stmt.bindString(12, fileIds);
        }
        stmt.bindLong(13, entity.getSendStatus());
 
        Long status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(14, status);
        }
        stmt.bindLong(15, entity.getTimestamp());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // localMsgId
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // svrMsgId
                cursor.getString(offset + 4), // fromUserId
                cursor.getString(offset + 5), // fromUserName
                cursor.getString(offset + 6), // contactId
                cursor.getLong(offset + 7), // contactType
                cursor.getString(offset + 8), // msg
                cursor.getLong(offset + 9), // msgType
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // msgMeta
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fileIds
                cursor.getLong(offset + 12), // sendStatus
                cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // status
                cursor.getLong(offset + 14) // timestamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocalMsgId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSvrMsgId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromUserId(cursor.getString(offset + 4));
        entity.setFromUserName(cursor.getString(offset + 5));
        entity.setContactId(cursor.getString(offset + 6));
        entity.setContactType(cursor.getLong(offset + 7));
        entity.setMsg(cursor.getString(offset + 8));
        entity.setMsgType(cursor.getLong(offset + 9));
        entity.setMsgMeta(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFileIds(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSendStatus(cursor.getLong(offset + 12));
        entity.setStatus(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setTimestamp(cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
