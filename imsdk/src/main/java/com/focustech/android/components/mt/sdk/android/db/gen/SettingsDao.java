package com.focustech.android.components.mt.sdk.android.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SETTINGS.
 */
public class SettingsDao extends AbstractDao<Settings, String> {

    public static final String TABLENAME = "SETTINGS";

    /**
     * Properties of entity Settings.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property AllowStrangerChatToMe = new Property(1, Long.class, "allowStrangerChatToMe", false, "ALLOW_STRANGER_CHAT_TO_ME");
        public final static Property AllowChatRecordOnServer = new Property(2, Long.class, "allowChatRecordOnServer", false, "ALLOW_CHAT_RECORD_ON_SERVER");
        public final static Property FriendRule = new Property(3, Long.class, "friendRule", false, "FRIEND_RULE");
        public final static Property GroupRule = new Property(4, Long.class, "groupRule", false, "GROUP_RULE");
        public final static Property CustomerSettings = new Property(5, String.class, "customerSettings", false, "CUSTOMER_SETTINGS");
    }

    ;


    public SettingsDao(DaoConfig config) {
        super(config);
    }

    public SettingsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SETTINGS' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "'ALLOW_STRANGER_CHAT_TO_ME' INTEGER," + // 1: allowStrangerChatToMe
                "'ALLOW_CHAT_RECORD_ON_SERVER' INTEGER," + // 2: allowChatRecordOnServer
                "'FRIEND_RULE' INTEGER," + // 3: friendRule
                "'GROUP_RULE' INTEGER," + // 4: groupRule
                "'CUSTOMER_SETTINGS' TEXT);"); // 5: customerSettings
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SETTINGS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Settings entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserId());
 
        Long allowStrangerChatToMe = entity.getAllowStrangerChatToMe();
        if (allowStrangerChatToMe != null) {
            stmt.bindLong(2, allowStrangerChatToMe);
        }
 
        Long allowChatRecordOnServer = entity.getAllowChatRecordOnServer();
        if (allowChatRecordOnServer != null) {
            stmt.bindLong(3, allowChatRecordOnServer);
        }
 
        Long friendRule = entity.getFriendRule();
        if (friendRule != null) {
            stmt.bindLong(4, friendRule);
        }
 
        Long groupRule = entity.getGroupRule();
        if (groupRule != null) {
            stmt.bindLong(5, groupRule);
        }
 
        String customerSettings = entity.getCustomerSettings();
        if (customerSettings != null) {
            stmt.bindString(6, customerSettings);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Settings readEntity(Cursor cursor, int offset) {
        Settings entity = new Settings( //
                cursor.getString(offset + 0), // userId
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // allowStrangerChatToMe
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // allowChatRecordOnServer
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // friendRule
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // groupRule
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // customerSettings
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Settings entity, int offset) {
        entity.setUserId(cursor.getString(offset + 0));
        entity.setAllowStrangerChatToMe(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAllowChatRecordOnServer(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFriendRule(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setGroupRule(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCustomerSettings(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Settings entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Settings entity) {
        if (entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
