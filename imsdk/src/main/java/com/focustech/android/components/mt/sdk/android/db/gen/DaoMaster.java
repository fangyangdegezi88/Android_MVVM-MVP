package com.focustech.android.components.mt.sdk.android.db.gen;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        AccountDao.createTable(db, ifNotExists);
        SettingsDao.createTable(db, ifNotExists);
        LastTimestampDao.createTable(db, ifNotExists);
        FriendGroupDao.createTable(db, ifNotExists);
        FriendDao.createTable(db, ifNotExists);
        FriendExtDao.createTable(db, ifNotExists);
        FriendRelationshipDao.createTable(db, ifNotExists);
        MessageDao.createTable(db, ifNotExists);
        ConversationDao.createTable(db, ifNotExists);
        RecentContactDao.createTable(db, ifNotExists);
        GroupDao.createTable(db, ifNotExists);
        GroupUserDao.createTable(db, ifNotExists);
        GroupSettingDao.createTable(db, ifNotExists);
        SystemNotifyDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        AccountDao.dropTable(db, ifExists);
        SettingsDao.dropTable(db, ifExists);
        LastTimestampDao.dropTable(db, ifExists);
        FriendGroupDao.dropTable(db, ifExists);
        FriendDao.dropTable(db, ifExists);
        FriendExtDao.dropTable(db, ifExists);
        FriendRelationshipDao.dropTable(db, ifExists);
        MessageDao.dropTable(db, ifExists);
        ConversationDao.dropTable(db, ifExists);
        RecentContactDao.dropTable(db, ifExists);
        GroupDao.dropTable(db, ifExists);
        GroupUserDao.dropTable(db, ifExists);
        GroupSettingDao.dropTable(db, ifExists);
        SystemNotifyDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(AccountDao.class);
        registerDaoClass(SettingsDao.class);
        registerDaoClass(LastTimestampDao.class);
        registerDaoClass(FriendGroupDao.class);
        registerDaoClass(FriendDao.class);
        registerDaoClass(FriendExtDao.class);
        registerDaoClass(FriendRelationshipDao.class);
        registerDaoClass(MessageDao.class);
        registerDaoClass(ConversationDao.class);
        registerDaoClass(RecentContactDao.class);
        registerDaoClass(GroupDao.class);
        registerDaoClass(GroupUserDao.class);
        registerDaoClass(GroupSettingDao.class);
        registerDaoClass(SystemNotifyDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
