package com.focustech.android.components.mt.sdk.android.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table GROUP_USER.
 */
public class GroupUserDao extends AbstractDao<GroupUser, Long> {

    public static final String TABLENAME = "GROUP_USER";

    /**
     * Properties of entity GroupUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupUserId = new Property(3, String.class, "groupUserId", false, "GROUP_USER_ID");
        public final static Property UserType = new Property(4, Long.class, "userType", false, "USER_TYPE");
        public final static Property GroupNickName = new Property(5, Long.class, "groupNickName", false, "GROUP_NICK_NAME");
        public final static Property LastChatTimestamp = new Property(6, Long.class, "lastChatTimestamp", false, "LAST_CHAT_TIMESTAMP");
        public final static Property NickNameSetting = new Property(7, Boolean.class, "nickNameSetting", false, "NICK_NAME_SETTING");
        public final static Property UserHeadType = new Property(8, Long.class, "userHeadType", false, "USER_HEAD_TYPE");
        public final static Property UserHeadId = new Property(9, String.class, "userHeadId", false, "USER_HEAD_ID");
        public final static Property Feature = new Property(10, Long.class, "feature", false, "FEATURE");
    }

    ;


    public GroupUserDao(DaoConfig config) {
        super(config);
    }

    public GroupUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT NOT NULL ," + // 1: userId
                "'GROUP_ID' TEXT NOT NULL ," + // 2: groupId
                "'GROUP_USER_ID' TEXT NOT NULL ," + // 3: groupUserId
                "'USER_TYPE' INTEGER," + // 4: userType
                "'GROUP_NICK_NAME' INTEGER," + // 5: groupNickName
                "'LAST_CHAT_TIMESTAMP' INTEGER," + // 6: lastChatTimestamp
                "'NICK_NAME_SETTING' INTEGER," + // 7: nickNameSetting
                "'USER_HEAD_TYPE' INTEGER," + // 8: userHeadType
                "'USER_HEAD_ID' TEXT," + // 9: userHeadId
                "'FEATURE' INTEGER);"); // 10: feature
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getGroupId());
        stmt.bindString(4, entity.getGroupUserId());
 
        Long userType = entity.getUserType();
        if (userType != null) {
            stmt.bindLong(5, userType);
        }
 
        Long groupNickName = entity.getGroupNickName();
        if (groupNickName != null) {
            stmt.bindLong(6, groupNickName);
        }
 
        Long lastChatTimestamp = entity.getLastChatTimestamp();
        if (lastChatTimestamp != null) {
            stmt.bindLong(7, lastChatTimestamp);
        }
 
        Boolean nickNameSetting = entity.getNickNameSetting();
        if (nickNameSetting != null) {
            stmt.bindLong(8, nickNameSetting ? 1l: 0l);
        }
 
        Long userHeadType = entity.getUserHeadType();
        if (userHeadType != null) {
            stmt.bindLong(9, userHeadType);
        }
 
        String userHeadId = entity.getUserHeadId();
        if (userHeadId != null) {
            stmt.bindString(10, userHeadId);
        }
 
        Long feature = entity.getFeature();
        if (feature != null) {
            stmt.bindLong(11, feature);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupUser readEntity(Cursor cursor, int offset) {
        GroupUser entity = new GroupUser( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // userId
                cursor.getString(offset + 2), // groupId
                cursor.getString(offset + 3), // groupUserId
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userType
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // groupNickName
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // lastChatTimestamp
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // nickNameSetting
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // userHeadType
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userHeadId
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // feature
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setGroupId(cursor.getString(offset + 2));
        entity.setGroupUserId(cursor.getString(offset + 3));
        entity.setUserType(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setGroupNickName(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLastChatTimestamp(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setNickNameSetting(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setUserHeadType(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setUserHeadId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFeature(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupUser entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
