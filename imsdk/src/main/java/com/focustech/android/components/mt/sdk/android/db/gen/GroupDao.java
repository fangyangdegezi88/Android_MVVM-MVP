package com.focustech.android.components.mt.sdk.android.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table GROUP_CHAT.
 */
public class GroupDao extends AbstractDao<Group, Long> {

    public static final String TABLENAME = "GROUP_CHAT";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupName = new Property(3, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupSignature = new Property(4, String.class, "groupSignature", false, "GROUP_SIGNATURE");
        public final static Property GroupKeyword = new Property(5, String.class, "groupKeyword", false, "GROUP_KEYWORD");
        public final static Property GroupDesc = new Property(6, String.class, "groupDesc", false, "GROUP_DESC");
        public final static Property GroupRemark = new Property(7, String.class, "groupRemark", false, "GROUP_REMARK");
        public final static Property GroupType = new Property(8, Long.class, "groupType", false, "GROUP_TYPE");
        public final static Property ValidateRule = new Property(9, Long.class, "validateRule", false, "VALIDATE_RULE");
        public final static Property AddUserId = new Property(10, String.class, "addUserId", false, "ADD_USER_ID");
        public final static Property AddUserName = new Property(11, String.class, "addUserName", false, "ADD_USER_NAME");
        public final static Property AddTime = new Property(12, String.class, "addTime", false, "ADD_TIME");
        public final static Property GroupNo = new Property(13, String.class, "groupNo", false, "GROUP_NO");
        public final static Property Limit = new Property(14, Long.class, "limit", false, "LIMIT");
        public final static Property AdminCount = new Property(15, Long.class, "adminCount", false, "ADMIN_COUNT");
        public final static Property GroupEnable = new Property(16, Long.class, "groupEnable", false, "GROUP_ENABLE");
        public final static Property Timestamp = new Property(17, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property LastActiveTimestamp = new Property(18, Long.class, "lastActiveTimestamp", false, "LAST_ACTIVE_TIMESTAMP");
        public final static Property Feature = new Property(19, Long.class, "feature", false, "FEATURE");
    }

    ;


    public GroupDao(DaoConfig config) {
        super(config);
    }

    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GROUP_CHAT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT NOT NULL ," + // 1: userId
                "'GROUP_ID' TEXT NOT NULL ," + // 2: groupId
                "'GROUP_NAME' TEXT," + // 3: groupName
                "'GROUP_SIGNATURE' TEXT," + // 4: groupSignature
                "'GROUP_KEYWORD' TEXT," + // 5: groupKeyword
                "'GROUP_DESC' TEXT," + // 6: groupDesc
                "'GROUP_REMARK' TEXT," + // 7: groupRemark
                "'GROUP_TYPE' INTEGER," + // 8: groupType
                "'VALIDATE_RULE' INTEGER," + // 9: validateRule
                "'ADD_USER_ID' TEXT," + // 10: addUserId
                "'ADD_USER_NAME' TEXT," + // 11: addUserName
                "'ADD_TIME' TEXT," + // 12: addTime
                "'GROUP_NO' TEXT," + // 13: groupNo
                "'LIMIT' INTEGER," + // 14: limit
                "'ADMIN_COUNT' INTEGER," + // 15: adminCount
                "'GROUP_ENABLE' INTEGER," + // 16: groupEnable
                "'TIMESTAMP' INTEGER," + // 17: timestamp
                "'LAST_ACTIVE_TIMESTAMP' INTEGER," + // 18: lastActiveTimestamp
                "'FEATURE' INTEGER);"); // 19: feature
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_CHAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getGroupId());
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(4, groupName);
        }
 
        String groupSignature = entity.getGroupSignature();
        if (groupSignature != null) {
            stmt.bindString(5, groupSignature);
        }
 
        String groupKeyword = entity.getGroupKeyword();
        if (groupKeyword != null) {
            stmt.bindString(6, groupKeyword);
        }
 
        String groupDesc = entity.getGroupDesc();
        if (groupDesc != null) {
            stmt.bindString(7, groupDesc);
        }
 
        String groupRemark = entity.getGroupRemark();
        if (groupRemark != null) {
            stmt.bindString(8, groupRemark);
        }
 
        Long groupType = entity.getGroupType();
        if (groupType != null) {
            stmt.bindLong(9, groupType);
        }
 
        Long validateRule = entity.getValidateRule();
        if (validateRule != null) {
            stmt.bindLong(10, validateRule);
        }
 
        String addUserId = entity.getAddUserId();
        if (addUserId != null) {
            stmt.bindString(11, addUserId);
        }
 
        String addUserName = entity.getAddUserName();
        if (addUserName != null) {
            stmt.bindString(12, addUserName);
        }
 
        String addTime = entity.getAddTime();
        if (addTime != null) {
            stmt.bindString(13, addTime);
        }
 
        String groupNo = entity.getGroupNo();
        if (groupNo != null) {
            stmt.bindString(14, groupNo);
        }
 
        Long limit = entity.getLimit();
        if (limit != null) {
            stmt.bindLong(15, limit);
        }
 
        Long adminCount = entity.getAdminCount();
        if (adminCount != null) {
            stmt.bindLong(16, adminCount);
        }
 
        Long groupEnable = entity.getGroupEnable();
        if (groupEnable != null) {
            stmt.bindLong(17, groupEnable);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(18, timestamp);
        }
 
        Long lastActiveTimestamp = entity.getLastActiveTimestamp();
        if (lastActiveTimestamp != null) {
            stmt.bindLong(19, lastActiveTimestamp);
        }
 
        Long feature = entity.getFeature();
        if (feature != null) {
            stmt.bindLong(20, feature);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getString(offset + 1), // userId
                cursor.getString(offset + 2), // groupId
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupName
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupSignature
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupKeyword
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupDesc
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupRemark
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // groupType
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // validateRule
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // addUserId
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // addUserName
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // addTime
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // groupNo
                cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // limit
                cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // adminCount
                cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // groupEnable
                cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // timestamp
                cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // lastActiveTimestamp
                cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // feature
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setGroupId(cursor.getString(offset + 2));
        entity.setGroupName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupSignature(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupKeyword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupDesc(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupType(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setValidateRule(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setAddUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddUserName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGroupNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setLimit(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setAdminCount(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setGroupEnable(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setTimestamp(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setLastActiveTimestamp(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setFeature(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Group entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Group entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
